// ## Gridhouse Flex version v2.0
@use 'sass:math';
@use '../../setup' as setup;
@use '../../01-setting/01-global' as global;
@use '../../01-setting/screen' as screen;
@use '../../02-tools/functions' as fc;
@use '../../03-modules/breakpoints' as breakpoint;

$-main-screen: setup.$grid-screen;
$-grid-gap: global.$grid-gap !default;
$-grid-columns: 12;//global.$grid-columns-number !default;

// ## Grid system
.wrapper-flex {
    display: block;
    overflow: hidden;
    width: $-main-screen;
    padding: 0;
    margin: 0 auto;
}

// $$ Row
.grid-row,
.g-row {
    display: flex;
    flex-wrap: wrap;
    flex: 1 1 100%;
    width: 100%;

    // $$ Reverse
    &.reverse,
    &.rev,
    &--reverse,
    &--rev {
        @extend .grid-row;
        flex-direction: row-reverse;
    }

    &--column {
        @extend .grid-row;
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
        -ms-flex-direction: column;
        flex-direction: column;

        .grid-desktop--12,
        .g-desktop--12 {
            width: 100%;
            flex-basis: initial;
        }

        // $$ Reverse
        &.reverse,
        &.rev,
        &--reverse,
        &--rev {
            @extend .grid-row;
            flex-direction: row-reverse;
        }
    }

    &--gutter {
        @extend .grid-row;

        &>[class*="grid-"],
        &>[class*="g-"] {
            padding-left: calc(#{$-grid-gap} / 2);
            padding-right: calc(#{$-grid-gap} / 2);

            &:first-child {
                padding-left: 0;
            }

            &:last-child {
                padding-right: 0;
            }
        }

        // $$ Reverse
        &.reverse,
        &.rev,
        &--reverse,
        &--rev {
            @extend .grid-row;
            flex-direction: row-reverse;
        }

        @media only screen and (max-width: screen(tablet-landscape) + 1) {
            &>.grid-tablet--12,
            .g-tablet--12,
            .grid-tablet-portrait--12,
            .g-tablet-portrait--12,
            .grid-mobile--12,
            .g-mobile--12,
            .grid-desktop-small--12,
            .g-desktop-small--12,
            .grid-desktop---12,
            .g-desktop---12 {
                padding-left: 0;
                padding-right: 0;
            }
        }
    }

    &.wrap {
        flex-wrap: wrap;

        &--no {
            flex-wrap: nowrap;
        }

        // $$ Reverse
        &.reverse,
        &.rev,
        &--reverse,
        &--rev {
            flex-wrap: wrap-reverse;
        }
    }

    &>[class*="grid-"],
    &>[class*="g-"] {
        display: flex;
    }
}

// $$ Columns
@for $i from 1 through $-grid-columns {
    .grid-desktop--#{$i},
    .g-desktop--#{$i} {
        flex-basis: ((100/$-grid-columns) * $i) *1%;
        width: ((100/$-grid-columns) * $i) *1%;
    }
}

@for $i from 1 through $-grid-columns {
    .grid-center--#{$i},
    .g-center--#{$i} {
        flex-basis: ((100/$-grid-columns) * $i) *1%;
        width: ((100/$-grid-columns) * $i) *1%;
        margin: 0 auto;
    }
}

@for $i from 1 through ($-grid-columns)-1 {
    .grid-offset--#{($i)},
    .g-offset--#{($i)} {
        margin-left: ((100/$-grid-columns) * $i) *1%;
    }
}

// $$  Fifths / 5 columns
.grid-fifth,
.g-fifth {
    flex-basis: 20%;
    width: 20%;

    &--center {
        flex-basis: 20%;
        width: 20%;
        margin: 0 auto;
    }
}

@for $i from 1 through 4 {
    .grid-fifth-offset--#{($i)},
    .g-fifth-offset--#{($i)} {
        margin-left: 20% * ($i);
    }
}

// $$ special behaviors
.grid-100,
.g-100 {
    flex: 1 0 auto;
}

.grid-auto,
.g-auto {
    flex: 0 1 auto;
}

// $$ Direction, position and distribution
[class*="grid-"],
[class*="g-"] {

    // $$ Direction
    &.vertical {
        flex-direction: column;

        // $$ Reverse
        &.reverse,
        &.rev,
        &--reverse,
        &--rev {
            flex-direction: column-reverse;
        }

        .grid-desktop--12,
        .g-desktop--12 {
            flex-basis: initial;
        }
    }

    &.horizontal {
        flex-direction: row;

        // $$ Reverse
        &.reverse,
        &.rev,
        &--reverse,
        &--rev {
            flex-direction: row-reverse;
        }
    }

    // $$ Horizontal
    &.left {
        justify-content: flex-start;

        &--auto {
            margin-left: auto;
        }
    }

    &.center {
        justify-content: center;
    }

    &.right {
        justify-content: flex-end;

        &--auto {
            margin-right: auto;
        }
    }

    // $$ Vertical
    &.top {
        align-items: flex-end;

        &--auto {
            margin-top: auto;
        }
    }

    &.middle {
        align-items: center;
    }

    &.bottom {
        -webkit-box-align: end;
        -ms-flex-align: end;
        align-items: flex-end;

        &--auto {
            margin-bottom: auto;
        }
    }

    &.stretch {
        align-items: stretch;
    }

    &.baseline {
        align-items: baseline;
    }

    // $$ distribution
    &.around {
        -ms-flex-pack: distribute;
        justify-content: space-around;
    }

    &.between {
        justify-content: space-between;
    }
}

// $$ show & hide by devices
.only {
    &--desktop {
        display: block;
    }

    &--tablet,
    &--mobile {
        display: none;
    }
}

.not {
    &--desktop {
        display: none;
    }
}

// ## Media queries
@media only screen and (max-width: screen(desktop) - 1) {
    .wrapper {
        width: 100%;
    }

    @for $i from 1 through $-grid-columns {
        .grid-desktop-small--#{$i},
        .g-desktop-small--#{$i} {
            flex-basis: ((100/$-grid-columns) * $i) *1%;
            width: ((100/$-grid-columns) * $i) *1%;
        }
    }

    .grid-row-desktop-small--rev,
    .g-row-desktop-small--rev {
        flex-direction: row-reverse;
    }

    .grid-desktop-small--rev,
    .g-desktop-small--rev {
        flex-direction: row-reverse;
    }
}

@media only screen and (max-width: screen(tablet-landscape) + 1) {
    .wrapper {
        max-width: screen(tablet-landscape);
    }

    @for $i from 1 through $-grid-columns {

        .grid-tablet--#{$i},
        .g-tablet--#{$i} {
            flex-basis: ((100/$-grid-columns) * $i) *1%;
            width: ((100/$-grid-columns) * $i) *1%;
        }
    }

    .grid-row-tablet--reverse,
    .g-row-tablet--rev {
        flex-direction: row-reverse;
    }

    .grid-tablet--reverse,
    .g-tablet--rev {
        flex-direction: row-reverse;
    }
}

@include breakpoint.screen(tablet-portrait) {
    .wrapper {
        max-width: screen(tablet-portrait);
    }

    @for $i from 1 through $-grid-columns {

        .grid-tablet-portrait--#{$i},
        .g-tablet-portrait--#{$i} {
            flex-basis: ((100/$-grid-columns) * $i) *1%;
            width: ((100/$-grid-columns) * $i) *1%;
        }
    }

    .grid-row-tablet-portrait--rev,
    .g-row-tablet-portrait--rev {
        -webkit-box-orient: horizontal;
        -webkit-box-direction: reverse;
        -ms-flex-direction: row-reverse;
        flex-direction: row-reverse;
    }

    .grid-tablet-portrait--rev,
    .g-tablet-portrait--rev {
        flex-direction: row-reverse;
    }
}

@include breakpoint.screen(mobile-landscape) {
    .wrapper {
        max-width: screen(mobile-landscape);
    }

    @for $i from 1 through $-grid-columns {

        .grid-mobile--#{$i},
        .g-mobile--#{$i} {
            flex-basis: ((100/$-grid-columns) * $i) *1%;
            width: ((100/$-grid-columns) * $i) *1%;
        }
    }

    .grid-row-mobile--rev,
    .g-row-tablet--rev {
        flex-direction: row-reverse;
    }

    .grid-mobile--reverse,
    .g-mobile--rev {
        flex-direction: row-reverse;
    }
}

@include breakpoint.screen(mobile-portrait) {
    .wrapper {
        max-width: 100% !important;
    }

    .grid-row>[class*="grid-"],
    .g-row>[class*="g-"] {
        flex-basis: 100%;
        margin-left: 0 !important;
    }

    .grid-row--gutter>[class*="grid-"],
    .g-row--gutter>[class*="g-"] {
        width: 100%;
        margin-left: 0 !important;
    }

    @for $i from 1 through ($-grid-columns) {

        .mobile-grid--#{$i},
        .mobile-g--#{$i} {
            flex-basis: ((100/$-grid-columns) * $i) *1% !important;
        }
    }
}

@media only screen and (max-width: screen(desktop) - 1) {
    .not {
        &--desktop-small {
            display: none !important;
        }
    }
}

@media only screen and (min-width: screen(tablet-portrait) - 1) and (max-width: screen(tablet-landscape)) {
    .only {
        &--desktop {
            display: none !important;
        }

        &--tablet {
            display: block !important;
        }
    }

    .not {
        &--tablet {
            display: none !important;
        }

        &--desktop {
            display: block !important;
        }
    }
}

@media only screen and (max-width: screen(tablet-portrait) - 1) {
    .only {
        &--mobile {
            display: block;
        }

        &--desktop {
            display: none;
        }

        &--tablet {
            display: none !important;
        }
    }

    .not {
        &--mobile {
            display: none !important;
        }

        &--desktop {
            display: block !important;
        }
    }
}
